# -*- coding: utf-8 -*-
"""price_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11ZZb_q30ego8Mif8o12yMgN-gR9IhEys
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import warnings
warnings.filterwarnings('ignore')

df = pd.read_csv('TrainData[1].csv', na_values='?')

if 'ID' in df.columns:
    df.drop(columns=['ID'], inplace=True)

df.head()

cols_to_convert = ['normalized-losses', 'bore', 'stroke', 'horsepower', 'peak-rpm']

for col in cols_to_convert:
    df[col] = pd.to_numeric(df[col], errors='coerce')

df.dropna(inplace=True)
df.reset_index(drop=True, inplace=True)

df.info()

label_encoder = LabelEncoder()

for col in df.select_dtypes(include='object').columns:
    df[col] = label_encoder.fit_transform(df[col])

df.head()

plt.figure(figsize=(12, 10))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Feature Correlation Heatmap')
plt.show()

correlation = df.corr()
target_corr = correlation['price'].drop('price')
selected_features = target_corr[abs(target_corr) > 0.3].index.tolist()

df = df[selected_features + ['price']]
print(df.head())

X = df.drop('price', axis=1)
y = df['price']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = RandomForestRegressor(n_estimators=200, random_state=42)
model.fit(X_train, y_train)
y_pred = model.predict(X_test)

print(f"Mean Squared Error: {mean_squared_error(y_test, y_pred):.2f}")
print(f"RÂ² Score: {r2_score(y_test, y_pred):.2f}")

plt.figure(figsize=(8, 6))
sns.scatterplot(x=y_test, y=y_pred)
plt.xlabel('Actual Price')
plt.ylabel('Predicted Price')
plt.title('Actual vs Predicted Car Prices')
plt.plot([y.min(), y.max()], [y.min(), y.max()], 'r--')
plt.show()

!pip install joblib

import joblib
joblib.dump(model, 'car_price_model.pkl')

df1 = pd.read_csv('TestData[1].csv', na_values='?')

if 'ID' in df1.columns:
    df1.drop(columns=['ID'], inplace=True)

df1.head()

cols_to_convert1 = ['normalized-losses', 'bore', 'stroke', 'horsepower', 'peak-rpm']

for col in cols_to_convert1:
    df1[col] = pd.to_numeric(df1[col], errors='coerce')

df1.dropna(inplace=True)
df1.reset_index(drop=True, inplace=True)

df1.info()

label_encoder1 = LabelEncoder()

for col in df1.select_dtypes(include='object').columns:
    df1[col] = label_encoder1.fit_transform(df1[col])

df1.head()

plt.figure(figsize=(12, 10))
sns.heatmap(df1.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Feature Correlation Heatmap')
plt.show()

correlation = df.corr()
target_corr = correlation['price'].drop('price')
selected_features = target_corr[abs(target_corr) > 0.3].index.tolist()

df1_selected = df1[selected_features]

X_test_final = scaler.transform(df1_selected)

predicted_prices = model.predict(X_test_final)

submission_df = pd.DataFrame(predicted_prices, columns=['price'])
submission_df.to_csv('submission.csv', index=False)

